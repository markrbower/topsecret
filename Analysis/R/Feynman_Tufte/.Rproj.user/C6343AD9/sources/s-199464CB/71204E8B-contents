MEFthenAnalysisLoopOnDirectory <- function( parameters, dbName, table_names, context ) {
  # Beginning of the NOGB algorithm.
  # Need to create all database tables for this seizure:
  # progress, P, M and C.
  
  library( RMySQL )
  library( doParallel )
  library( foreach )
  library( signal )

  source('~/Dropbox/Documents/Concepts/2018_07_27_meftools/Analysis/meftools/R/SQLiter.R')
  source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/DIRiter.R')
  
  options(stringsAsFactors = FALSE);
  
#  print('Starting')
  dirPath <- context$path
  print( dirPath )
  subject <- context$subject
  seizureUsed <- context$centerTime

  hourWindow <- 24
  progress_table <- table_names['progress']
  signal_table <- table_names['P']
  cluster_table <- table_names['C']
#  correlationWindow <- 5*1E6
  correlationWindow <- parameters$correlationWindow

  cl<-makeCluster(4,outfile="")
  registerDoParallel(cl)
  
  cases <- DIRiter( dirPath, subject, seizureUsed )

#  info <- list( filename='0_0_0') # prime this variable
  
  foreach (case=cases ) %dopar% { # a case is a named list: subject, channel and event_start
#  while ( hasNext(cases) ) { # a case is a named list: subject, channel and event_start
#    case <- nextElem( cases )
    print( case )

    library( RMySQL )
    
    source('~/Dropbox/Documents/Concepts/2018_07_27_meftools/Analysis/meftools/R/mef_info.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/db.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/filenameFromCase.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/computeTimeConstraints.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/getNVsubjectFromFilename.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/currentProcessedLevel.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/createGraphAndBufferThenFilterAndSendToPeakFinder.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/markProcessedLevel.R')
    source('~/Dropbox/Documents/Concepts/2019_11_19_NetworkParameterOutlier/Analysis/NPO/R/home.R')

    filename <- filenameFromCase( home(), case, dirPath )
    if ( file.exists(filename) ) {
      tryCatch(
        {
          conn_local <- db( dbName )
          # print( paste0( "Starting processing", filename ) )
          if ( currentProcessedLevel( conn_local, progress_table, case, case$centerTime, 1 )==0 ) {
            # print( "Loading mef info" )
            password_key <- paste0( dbName, '_MEFpassword' )
            info <- mef_info( c(filename,get_secret(password_key,key=local_key(),vault=get_secret_vault())) )
            # print( "Done loading mef info" )
            #
            # Analyze the entire file, so set the centering time to the mean of the file's timestamps.
            default_centerTime <- mean( c(info$header$recording_start_time, info$header$recording_end_time) )
            timeConstraints <- computeTimeConstraints( default_centerTime, info, hourWindow )
#            if ( timeConstraints['isValid'] ) {
              # print( "Starting identificationAlgo" )
              createGraphAndBufferThenFilterAndSendToPeakFinder( parameters, conn_local, filename, context, case$subject, case$channel, case$centerTime, signal_table, cluster_table, timeConstraints, info, correlationWindow )
    #          identificationAlgorithm_simple( conn_local, filename, password, case$subject, case$channel, case$timestamp, signal_table, cluster_table, timeConstraints, info, correlationWindow )
              markProcessedLevel( conn_local, progress_table, case, case$centerTime, 1 )
#            }
          }
          dbDisconnect( conn_local )
          rm( info )
          gc()
        },error=function(e)
        {
          print( paste0(e) )
          dbDisconnect( conn_local )
          rm( info )
          gc()
        }
      )
    } else {
      print( paste0( "Filename not found: ", filename ) )
    }
    # print( paste0( "Done processing", filename ) )
  }

}
